//======================================================================================================================
//
// シングルトンパターン[Singleton.cs]
//
//---- 詳細 ------------------------------------------------------------------------------------------------------------
// シングルトーンパターンクラスを定義する。
// 
//----------------------------------------------------------------------------------------------------------------------
// 更新日     更新者        バージョン 更新内容
// ---------- ------------- ---------- ---------------------------------------------------------------------------------
// yyyy/MM/dd anonymous     xx.xx.xx   -
// 2024/12/15 大行佑也      00.00.01   新規作成
//
//======================================================================================================================
using System;
using UnityEngine;

namespace BTLGeek.DesignPattern
{
    /// <summary>
    /// シングルトンクラス
    /// </summary>
    /// <typeparam name="T">継承クラス</typeparam>
    public class Singleton<T> : MonoBehaviour where T : Singleton<T>
    {
        /// <summary>
        /// インスタンス
        /// </summary>
        [field: NonSerialized]
        public static T Instance { get; private set; } = null;

        /// <summary>
        /// オブジェクト生成時に呼ばれる
        /// </summary>
        private void Awake()
        {
            // すでに生成されているかの判定
            if (Instance != null) {
                // 既に生成済みの場合
                // エラーログ表示
                Debug.LogError($"{typeof(T)}は既に他のオブジェクトにアタッチされているため破棄しました。\n" +
                               $"既にアタッチされているオブジェクト：{Instance.gameObject.name}\n" +
                               $"今回アタッチしたオブジェクト      ：{gameObject.name}");

                // 既存を残して、自分を破棄する
                Destroy(this);
            }
            else {
                // まだ生成されていない場合
                // 自分をInstanceに設定
                Instance = (T)this;
            }
        }

        /// <summary>
        /// オブジェクトが破棄されるときに呼ばれる
        /// </summary>
        private void OnDestroy()
        {
            // インスタンスと自分が同じかの判定
            if(Instance == this) {
                // 同じだった場合は、破棄する。
                Instance = null;
            }
            else {
                // 違っていた場合は、間違って生成したものなので何もしない。
            }
        }
    }
}